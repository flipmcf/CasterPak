[application]
debug = False

[cache]
#TTL of segment files in minutes
segment_file_age = 120

#Setting this to true will copy source files to a cache before processing
#this is useful if requesting source files is expensive - for example, over a network mount
#They will be cached to a local, faster drive.
cache_input = False

#TTL of input video files in minutes
#This should always be larger than segment_file_age
input_file_age = 4320

[input]
#Path to where the input files live.
#Everything after this path is considered part of the url.

# For example, a video file exists on the filesystem at /mnt/media/files/videos/video.mp4
# and we configure 'videoParentPath' to '/mnt/media/files/'
# this results in an http endpoint of 'http://example.com/i/videos/video.mp4/index.m3u8'
videoParentPath = /path/to/input/directory

#if cache_input is set to true above, video files are copied
#from videoParentPath to videoCachePath before processing.
#this also acts as a cache - if input files are found here, no copy will occur.
videoCachePath = /tmp/video_input

[output]
#Path where output segments will be stored after generation.
segmentParentPath = /tmp/segments

#child manifest name (segment manifest name)
#This is the file that describes the actual video segments.
childManifestFilename = index_0_av.m3u8

#servername used in generating absolute paths to segment files:
#Leaving this unconfigured will generate relative paths to segment files in the child manifest
# serverName = example.com

[bento4]
#Path to the bento4 binaries.
binaryPath = /bin
